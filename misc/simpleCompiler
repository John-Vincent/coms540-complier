#!/usr/bin/env node

const fs = require('fs');

const regex = /[0-9*+]/;

main();

function main()
{
    return new Promise((resolve,reject)=>
    {
        var input = process.argv;
        //pull "node" and file name off of the arg list
        input.shift();
        input.shift();

        if(input.length == 0)
        {
            return readStdin(); 
        }
        else
        {
            resolve(input);
        }
    }).then(compile)
    .then(output);
}

function readStdin()
{
    return new Promise((resolve, reject)=>
    {

        fs.readFile('/dev/stdin', 'utf8', (err, stdin)=>
        {
            if(err)
            {
                console.error(err);
                system.exit();
            }
            resolve(stdin);
        });
    });
}

function compile(inputArray)
{
    var stack = [];
    var operands = [];
    //if there is no input then there is no output
    console.log(inputArray);
    if(!inputArray || !inputArray[0])
        return;
    //assume format is correct because this is not the parsing section of my compiler
    stack.push(inputArray[0]);
    for(var i = 1; i < inputArray.length; i+=2)
    {
        if(inputArray[i] == "+")
        {
            if(operands.length > 0)
                stack.push(operands.pop());
            stack.push(inputArray[i+1]);
            operands.push('+');
        }
        else //then it has to be *
        {
            stack.push(inputArray[i+1]);
            stack.push(inputArray[i]);
        }
    }
    if(operands.length > 0)
        for(var i = 0; i < operands.length; i++)
            stack.push(operands.pop());
    console.log(stack);
    return stack;
}

function output(output)
{
    if(output)
        for(var i = 0; i < output; i++)
            console.log(output[i]);
}

function printArgs()
{
    for(var i = 0; i < input.length; i++)
    {
        console.log(input[i]);
    }
}
